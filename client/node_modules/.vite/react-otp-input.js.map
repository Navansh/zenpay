{
  "version": 3,
  "sources": ["../src/index.tsx", "dep:react-otp-input"],
  "sourcesContent": ["import React from 'react';\n\ntype AllowedInputTypes = 'password' | 'text' | 'number' | 'tel';\n\ntype InputProps = Required<\n  Pick<\n    React.InputHTMLAttributes<HTMLInputElement>,\n    | 'value'\n    | 'onChange'\n    | 'onFocus'\n    | 'onBlur'\n    | 'onKeyDown'\n    | 'onPaste'\n    | 'aria-label'\n    | 'maxLength'\n    | 'autoComplete'\n    | 'style'\n    | 'inputMode'\n    | 'onInput'\n  > & {\n    ref: React.RefCallback<HTMLInputElement>;\n    placeholder: string | undefined;\n    className: string | undefined;\n    type: AllowedInputTypes;\n  }\n>;\n\ninterface OTPInputProps {\n  /** Value of the OTP input */\n  value?: string;\n  /** Number of OTP inputs to be rendered */\n  numInputs?: number;\n  /** Callback to be called when the OTP value changes */\n  onChange: (otp: string) => void;\n  /** Callback to be called when pasting content into the component */\n  onPaste?: (event: React.ClipboardEvent<HTMLDivElement>) => void;\n  /** Function to render the input */\n  renderInput: (inputProps: InputProps, index: number) => React.ReactNode;\n  /** Whether the first input should be auto focused */\n  shouldAutoFocus?: boolean;\n  /** Placeholder for the inputs */\n  placeholder?: string;\n  /** Function to render the separator */\n  renderSeparator?: ((index: number) => React.ReactNode) | React.ReactNode;\n  /** Style for the container */\n  containerStyle?: React.CSSProperties | string;\n  /** Style for the input */\n  inputStyle?: React.CSSProperties | string;\n  /** The type that will be passed to the input being rendered */\n  inputType?: AllowedInputTypes;\n  /** Do not apply the default styles to the inputs, will be removed in future versions */\n  skipDefaultStyles?: boolean; // TODO: Remove in next major release\n}\n\nconst isStyleObject = (obj: unknown) => typeof obj === 'object' && obj !== null;\n\nconst OTPInput = ({\n  value = '',\n  numInputs = 4,\n  onChange,\n  onPaste,\n  renderInput,\n  shouldAutoFocus = false,\n  inputType = 'text',\n  renderSeparator,\n  placeholder,\n  containerStyle,\n  inputStyle,\n  skipDefaultStyles = false,\n}: OTPInputProps) => {\n  const [activeInput, setActiveInput] = React.useState(0);\n  const inputRefs = React.useRef<Array<HTMLInputElement | null>>([]);\n\n  const getOTPValue = () => (value ? value.toString().split('') : []);\n\n  const isInputNum = inputType === 'number' || inputType === 'tel';\n\n  React.useEffect(() => {\n    inputRefs.current = inputRefs.current.slice(0, numInputs);\n  }, [numInputs]);\n\n  React.useEffect(() => {\n    if (shouldAutoFocus) {\n      inputRefs.current[0]?.focus();\n    }\n  }, [shouldAutoFocus]);\n\n  const getPlaceholderValue = () => {\n    if (typeof placeholder === 'string') {\n      if (placeholder.length === numInputs) {\n        return placeholder;\n      }\n\n      if (placeholder.length > 0) {\n        console.error('Length of the placeholder should be equal to the number of inputs.');\n      }\n    }\n    return undefined;\n  };\n\n  const isInputValueValid = (value: string) => {\n    const isTypeValid = isInputNum ? !isNaN(Number(value)) : typeof value === 'string';\n    return isTypeValid && value.trim().length === 1;\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    if (isInputValueValid(value)) {\n      changeCodeAtFocus(value);\n      focusInput(activeInput + 1);\n    }\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { nativeEvent } = event;\n    if (!isInputValueValid(event.target.value)) {\n      // @ts-expect-error - This was added previosly to handle and edge case\n      // for dealing with keyCode \"229 Unidentified\" on Android. Check if this is\n      // still needed.\n      if (nativeEvent.data === null && nativeEvent.inputType === 'deleteContentBackward') {\n        event.preventDefault();\n        changeCodeAtFocus('');\n        focusInput(activeInput - 1);\n      }\n      // Clear the input if it's not valid value because firefox allows\n      // pasting non-numeric characters in a number type input\n      event.target.value = '';\n    }\n  };\n\n  const handleFocus = (event: React.FocusEvent<HTMLInputElement>) => (index: number) => {\n    setActiveInput(index);\n    event.target.select();\n  };\n\n  const handleBlur = () => {\n    setActiveInput(activeInput - 1);\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    const otp = getOTPValue();\n    if ([event.code, event.key].includes('Backspace')) {\n      event.preventDefault();\n      changeCodeAtFocus('');\n      focusInput(activeInput - 1);\n    } else if (event.code === 'Delete') {\n      event.preventDefault();\n      changeCodeAtFocus('');\n    } else if (event.code === 'ArrowLeft') {\n      event.preventDefault();\n      focusInput(activeInput - 1);\n    } else if (event.code === 'ArrowRight') {\n      event.preventDefault();\n      focusInput(activeInput + 1);\n    }\n    // React does not trigger onChange when the same value is entered\n    // again. So we need to focus the next input manually in this case.\n    else if (event.key === otp[activeInput]) {\n      event.preventDefault();\n      focusInput(activeInput + 1);\n    } else if (\n      event.code === 'Spacebar' ||\n      event.code === 'Space' ||\n      event.code === 'ArrowUp' ||\n      event.code === 'ArrowDown'\n    ) {\n      event.preventDefault();\n    }\n  };\n\n  const focusInput = (index: number) => {\n    const activeInput = Math.max(Math.min(numInputs - 1, index), 0);\n\n    if (inputRefs.current[activeInput]) {\n      inputRefs.current[activeInput]?.focus();\n      inputRefs.current[activeInput]?.select();\n      setActiveInput(activeInput);\n    }\n  };\n\n  const changeCodeAtFocus = (value: string) => {\n    const otp = getOTPValue();\n    otp[activeInput] = value[0];\n    handleOTPChange(otp);\n  };\n\n  const handleOTPChange = (otp: Array<string>) => {\n    const otpValue = otp.join('');\n    onChange(otpValue);\n  };\n\n  const handlePaste = (event: React.ClipboardEvent<HTMLInputElement>) => {\n    event.preventDefault();\n\n    const otp = getOTPValue();\n    let nextActiveInput = activeInput;\n\n    // Get pastedData in an array of max size (num of inputs - current position)\n    const pastedData = event.clipboardData\n      .getData('text/plain')\n      .slice(0, numInputs - activeInput)\n      .split('');\n\n    // Prevent pasting if the clipboard data contains non-numeric values for number inputs\n    if (isInputNum && pastedData.some((value) => isNaN(Number(value)))) {\n      return;\n    }\n\n    // Paste data from focused input onwards\n    for (let pos = 0; pos < numInputs; ++pos) {\n      if (pos >= activeInput && pastedData.length > 0) {\n        otp[pos] = pastedData.shift() ?? '';\n        nextActiveInput++;\n      }\n    }\n\n    focusInput(nextActiveInput);\n    handleOTPChange(otp);\n  };\n\n  return (\n    <div\n      style={Object.assign({ display: 'flex', alignItems: 'center' }, isStyleObject(containerStyle) && containerStyle)}\n      className={typeof containerStyle === 'string' ? containerStyle : undefined}\n      onPaste={onPaste}\n    >\n      {Array.from({ length: numInputs }, (_, index) => index).map((index) => (\n        <React.Fragment key={index}>\n          {renderInput(\n            {\n              value: getOTPValue()[index] ?? '',\n              placeholder: getPlaceholderValue()?.[index] ?? undefined,\n              ref: (element) => (inputRefs.current[index] = element),\n              onChange: handleChange,\n              onFocus: (event) => handleFocus(event)(index),\n              onBlur: handleBlur,\n              onKeyDown: handleKeyDown,\n              onPaste: handlePaste,\n              autoComplete: 'off',\n              maxLength: 1,\n              'aria-label': `Please enter OTP character ${index + 1}`,\n              style: Object.assign(\n                !skipDefaultStyles ? ({ width: '1em', textAlign: 'center' } as const) : {},\n                isStyleObject(inputStyle) ? inputStyle : {}\n              ),\n              className: typeof inputStyle === 'string' ? inputStyle : undefined,\n              type: inputType,\n              inputMode: isInputNum ? 'numeric' : 'text',\n              onInput: handleInputChange,\n            },\n            index\n          )}\n          {index < numInputs - 1 && (typeof renderSeparator === 'function' ? renderSeparator(index) : renderSeparator)}\n        </React.Fragment>\n      ))}\n    </div>\n  );\n};\n\nexport type { OTPInputProps, InputProps, AllowedInputTypes };\nexport default OTPInput;\n", "import d from \"./node_modules/react-otp-input/lib/index.esm.js\";export default d;"],
  "mappings": "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",
  "names": []
}
